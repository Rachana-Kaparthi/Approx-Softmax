def binary_to_decimal(binary_data,pos):
    # Split the binary string into integer and fractional parts
    binary_data=str(binary_data)
    
    pos=str(pos)
    pos=int(pos,2)
    
    integer_part = int(binary_data[4:4+pos], 2)
    
    fractional_part = int(binary_data[4+pos:], 2)
    

    # Calculate the decimal value
    decimal_value = integer_part + fractional_part / (2 ** (16-pos))

    return decimal_value

def fractional_to_binary(fractional_number):
    # Separate the integer and fractional parts
    integer_part = int(fractional_number)
    fractional_part = fractional_number - integer_part

    # Convert the integer part to binary
    integer_binary = bin(integer_part)[2:]

    # Convert the fractional part to binary
    fractional_binary = ""
    while len(integer_binary) + len(fractional_binary) < 16:
        fractional_part *= 2
        bit = int(fractional_part)
        fractional_binary += str(bit)
        fractional_part -= bit

    # Pad with zeros if needed
    remaining_bits = 16 - len(integer_binary) - len(fractional_binary)
    fractional_binary += '0' * remaining_bits

    # Combine integer and fractional parts
    binary_equivalent = integer_binary + fractional_binary

    # Find the position of the decimal point
    decimal_position = len(integer_binary)

    decimal_position_2=format(decimal_position, '05b')
    
    return binary_equivalent, decimal_position_2


def multiplic(ans_int,ans_msb1,ans_msb2,ans_lsb):


    prod_1 = binary_to_decimal(ans_int,ans_int[:4])*binary_to_decimal(ans_msb1,ans_msb1[:4])* binary_to_decimal(ans_msb2,ans_msb2[:4])*binary_to_decimal(ans_lsb,ans_lsb[:4])
    # print((ans_int,ans_int[:4]))
    
   
    
    result,position = fractional_to_binary(prod_1)

    return result,position
def softmax (x):
    wid_int = 5
    wid_MSB1 = 4
    wid_MSB2 = 4
    wid_LSB = 8
    
    x_int = x[0:5]
    x_msb1=x[5:9]
    x_msb2=x[9:13]
    x_lsb=x[13:16]
    
    exp_int= ["00010000000000000001",
    "00010000000000000100",
    "00010000000000001010",
    "00010000000000011101",
    "00010000000001010001",
    "00010000000011011100",
    "00010000001001011000",
    "00010000011001011111",
    "00010001000101010010",
    "00010010111100010110",
    "00011000000000000000",
    "00101010110111110011",
    "00111110110001110010",
    "01011010000010110000",
    "01101101101001100100",
    "10001001010001101001",
    "10011100100110110110",
    "10111000100100010100",
    "11001011101001001111",
    "11011111110100111000",
    "11111010110000010100"]
    
    exp_MSB2 = ["00010111100010110111",
    "00010111100100110000",
    "00010111100110101001",
    "00010111101000100011",
    "00010111101010011101",
    "00010111101100011000",
    "00010111101110010100",
    "00010111110000001111",
    "00010111110010001100",
    "00010111110100001000",
    "00010111110110000110",
    "00010111111000000011",
    "00010111111010000010",
    "00010111111100000000",
    "00010111111110000000",
    "00011000000000000000",
    "00011000000010000000",
    "00011000000100000001",
    "00011000000110000010",
    "00011000001000000100",
    "00011000001010000110",
    "00011000001100001001",
    "00011000001110001100",
    "00011000010000010000",
    "00011000010010010100",
    "00011000010100011001",
    "00011000010110011110",
    "00011000011000100100",
    "00011000011010101010",
    "00011000011100110001",
    "00011000011110111001"]

    
    exp_MSB1 = [
    "00100001100100010000",
    "00100001101010101101",
    "00100001110001100110",
    "00100001111000111011",
    "00100010000000101110",
    "00100010001001000001",
    "00100010010001110111",
    "00100010011011010001",
    "00100010100101010010",
    "00100010101111111100",
    "00100010111011010010",
    "00100011000111010111",
    "00100011010100001110",
    "00100011100001111010",
    "00100011110000011111",
    "00100100000000000000",
    "00100100010000100000",
    "00100100100010000101",
    "00100100110100110010",
    "00100101001000101101",
    "00100101011101111010",
    "00100101110100011110",
    "00100110001100100000",
    "00100110100110000100",
    "00100111000001010010",
    "00100111011110010001",
    "00100111111101000111",
    "00101000011101111100",
    "00101001000000111001",
    "00101001100110000111",
    "00101010001101101110"
]


    
    exp_LSB = [
    "0001011111111001000",
    "0001011111111010000",
    "0001011111111011000",
    "0001011111111100000",
    "0001011111111101000",
    "0001011111111110000",
    "0001011111111111000",
    "0001100000000000000",
    "0001100000000001000",
    "0001100000000010000",
    "0001100000000011000",
    "0001100000000100000",
    "0001100000000101000",
    "0001100000000110000",
    "0001100000000111000"]


    
    j = {"11010": 1,
    "11001": 2,
    "11000": 3,
    "10111": 4,
    "10110": 5,
    "10101": 6,
    "10100": 7,
    "10011": 8,
    "10010": 9,
    "10001": 10,
    "00000": 11,
    "00001": 12,
    "00010": 13,
    "00011": 14,
    "00100": 15,
    "00101": 16,
    "00110": 17,
    "00111": 18,
    "01000": 19,
    "01001": 20,
    "01010": 21}.get(x_int, 0)

    ans_int = exp_int[j-1]
    
    # print("ans_int",ans_int)
    
    k = {
    '11111': 1, '11110': 2, '11101': 3, '11100': 4, '11011': 5, '11010': 6, '11001': 7, '11000': 8,
    '10111': 9, '10110': 10, '10101': 11, '10100': 12, '10011': 13, '10010': 14, '10001': 15, '00000': 16,
    '01111': 31, '01110': 30, '01101': 29, '01100': 28, '01011': 27, '01010': 26, '01001': 25, '01000': 24,
    '00111': 23, '00110': 22, '00101': 21, '00100': 20, '00011': 19, '00010': 18, '00001': 17}.get(x[0]+x_msb1, 0)

    
    ans_msb1= exp_MSB1[k-1]
    # print("ans_msb1",ans_msb1)

    m ={
    '11111': 1, '11110': 2, '11101': 3, '11100': 4, '11011': 5, '11010': 6, '11001': 7, '11000': 8,
    '10111': 9, '10110': 10, '10101': 11, '10100': 12, '10011': 13, '10010': 14, '10001': 15, '00000': 16,
    '01111': 31, '01110': 30, '01101': 29, '01100': 28, '01011': 27, '01010': 26, '01001': 25, '01000': 24,
    '00111': 23, '00110': 22, '00101': 21, '00100': 20, '00011': 19, '00010': 18, '00001': 17}.get(x[0]+x_msb2, 0)
    
    ans_msb2= exp_MSB2[m-1]
    # print("ans_msb2",ans_msb2)

    n = {
    '1111': 1, '1110': 2, '1101': 3, '1100': 4, '1011': 5, '1010': 6, '1001': 7, '0000': 8,
    '0111': 15, '0110': 14, '0101': 13, '0100': 12, '0011': 11, '0010': 10, '0001': 9}.get(x[0]+x_lsb, 0)

    # print("j:,",j,"k:",k,"m:",m,"n:",n)
    
    ans_lsb = exp_LSB[n-1]
    # print("ans_lsb",ans_lsb)
    
    
    result,pos= multiplic(ans_int,ans_msb1,ans_msb2,ans_lsb)

    return pos+result


 
 
y=softmax("10101111110011010")
print(y)



    
